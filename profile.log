FUNCTION  <SNR>30_Highlight_Matching_Pair()
    Defined: /usr/share/nvim/runtime/plugin/matchparen.vim:44
Called 106 times
Total time:   1.669873
 Self time:   1.665416

count  total (s)   self (s)
  106              0.000959   if !exists("w:matchparen_ids")
                                let w:matchparen_ids = []
  106              0.000471   endif
                              " Remove any previous match.
  106   1.640897   1.636440   call s:Remove_Matches()
                            
                              " Avoid that we remove the popup menu.
                              " Return when there are no colors (looks like the cursor jumps).
  106              0.000677   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
                                return
  106              0.000394   endif
                            
                              " Get the character under the cursor and check if it's in 'matchpairs'.
  106              0.000570   let c_lnum = line('.')
  106              0.000521   let c_col = col('.')
  106              0.000439   let before = 0
                            
  106              0.000532   let text = getline(c_lnum)
  106              0.000812   let c_before = text->strpart(0, c_col - 1)->slice(-1)
  106              0.000615   let c = text->strpart(c_col - 1)->slice(0, 1)
  106              0.001701   let plist = split(&matchpairs, '.\zs[:,]')
  106              0.000534   let i = index(plist, c)
  106              0.000427   if i < 0
                                " not found, in Insert mode try character before the cursor
  106              0.000573     if c_col > 1 && (mode() == 'i' || mode() == 'R')
   88              0.000433       let before = strlen(c_before)
   88              0.000356       let c = c_before
   88              0.000415       let i = index(plist, c)
  106              0.000394     endif
  106              0.000447     if i < 0
                                  " not found, nothing to do
  100              0.000484       return
    6              0.000021     endif
    6              0.000021   endif
                            
                              " Figure out the arguments for searchpairpos().
    6              0.000024   if i % 2 == 0
                                let s_flags = 'nW'
                                let c2 = plist[i + 1]
    6              0.000023   else
    6              0.000026     let s_flags = 'nbW'
    6              0.000032     let c2 = c
    6              0.000029     let c = plist[i - 1]
    6              0.000021   endif
    6              0.000025   if c == '['
                                let c = '\['
                                let c2 = '\]'
    6              0.000021   endif
                            
                              " Find the match.  When it was just before the cursor move it there for a
                              " moment.
    6              0.000024   if before > 0
    6              0.000033     let has_getcurpos = exists("*getcurpos")
    6              0.000024     if has_getcurpos
                                  " getcurpos() is more efficient but doesn't exist before 7.4.313.
    6              0.000039       let save_cursor = getcurpos()
                                else
                                  let save_cursor = winsaveview()
    6              0.000022     endif
    6              0.000034     call cursor(c_lnum, c_col - before)
    6              0.000022   endif
                            
    6              0.000044   if !has("syntax") || !exists("g:syntax_on")
                                let s_skip = "0"
    6              0.000021   else
                                " Build an expression that detects whether the current cursor position is
                                " in certain syntax types (string, comment, etc.), for use as
                                " searchpairpos()'s skip argument.
                                " We match "escape" for special items, such as lispEscapeSpecial, and
                                " match "symbol" for lispBarSymbol.
    6              0.000037     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
                                " If executing the expression determines that the cursor is currently in
                                " one of the syntax types, then we want searchpairpos() to find the pair
                                " within those syntax types (i.e., not skip).  Otherwise, the cursor is
                                " outside of the syntax types and s_skip should keep its value so we skip
                                " any matching pair inside the syntax types.
                                " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
    6              0.000024     try
    6              0.000102       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
                                catch /^Vim\%((\a\+)\)\=:E363/
                                  " We won't find anything, so skip searching, should keep Vim responsive.
                                  return
    6              0.000022     endtry
    6              0.000021   endif
                            
                              " Limit the search to lines visible in the window.
    6              0.000033   let stoplinebottom = line('w$')
    6              0.000029   let stoplinetop = line('w0')
    6              0.000024   if i % 2 == 0
                                let stopline = stoplinebottom
    6              0.000020   else
    6              0.000024     let stopline = stoplinetop
    6              0.000020   endif
                            
                              " Limit the search time to 300 msec to avoid a hang on very long lines.
                              " This fails when a timeout is not supported.
    6              0.000027   if mode() == 'i' || mode() == 'R'
    6              0.000038     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
                              else
                                let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
    6              0.000020   endif
    6              0.000021   try
    6              0.000222     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
                              catch /E118/
                                " Can't use the timeout, restrict the stopline a bit more to avoid taking
                                " a long time on closed folds and long lines.
                                " The "viewable" variables give a range in which we can scroll while
                                " keeping the cursor at the same position.
                                " adjustedScrolloff accounts for very large numbers of scrolloff.
                                let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
                                let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
                                let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
                                " one of these stoplines will be adjusted below, but the current values are
                                " minimal boundaries within the current window
                                if i % 2 == 0
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
                            	let stopline = min([bottom_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = min([bottom_viewable, c_lnum + 100])
                                  endif
                                  let stoplinebottom = stopline
                                else
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
                            	let stopline = max([top_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = max([top_viewable, c_lnum - 100])
                                  endif
                                  let stoplinetop = stopline
                                endif
                                let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
    6              0.000020   endtry
                            
    6              0.000023   if before > 0
    6              0.000022     if has_getcurpos
    6              0.000033       call setpos('.', save_cursor)
                                else
                                  call winrestview(save_cursor)
    6              0.000020     endif
    6              0.000020   endif
                            
                              " If a match is found setup match highlighting.
    6              0.000029   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
    6              0.000024     if s:has_matchaddpos
    6              0.000073       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
                                else
                                  exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
                                  call add(w:matchparen_ids, 3)
    6              0.000020     endif
    6              0.000025     let w:paren_hl_on = 1
    6              0.000020   endif

FUNCTION  nvim_treesitter#indent()
    Defined: ~/.local/share/nvim/lazy/nvim-treesitter/autoload/nvim_treesitter.vim:25
Called 13 times
Total time:   0.058173
 Self time:   0.058173

count  total (s)   self (s)
   13              0.058049 	return luaeval(printf('require"nvim-treesitter.indent".get_indent(%d)', v:lnum))

FUNCTION  <SNR>30_Remove_Matches()
    Defined: /usr/share/nvim/runtime/plugin/matchparen.vim:202
Called 106 times
Total time:   0.004457
 Self time:   0.004457

count  total (s)   self (s)
  106              0.000588   if exists('w:paren_hl_on') && w:paren_hl_on
   14              0.000073     while !empty(w:matchparen_ids)
    7              0.000095       silent! call remove(w:matchparen_ids, 0)->matchdelete()
   14              0.000058     endwhile
    7              0.000035     let w:paren_hl_on = 0
  106              0.000409   endif

FUNCTIONS SORTED ON TOTAL TIME
count  total (s)   self (s)  function
  106   1.669873   1.665416  <SNR>30_Highlight_Matching_Pair()
   13   0.058173             nvim_treesitter#indent()
  106   0.004457             <SNR>30_Remove_Matches()

FUNCTIONS SORTED ON SELF TIME
count  total (s)   self (s)  function
  106   1.669873   1.665416  <SNR>30_Highlight_Matching_Pair()
   13              0.058173  nvim_treesitter#indent()
  106              0.004457  <SNR>30_Remove_Matches()

